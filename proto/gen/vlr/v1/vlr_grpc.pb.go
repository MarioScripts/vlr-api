// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: vlr/v1/vlr.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// VlrClient is the client API for Vlr service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VlrClient interface {
	// GetMatches
	Matches(ctx context.Context, in *MatchesRequest, opts ...grpc.CallOption) (*MatchesResponse, error)
}

type vlrClient struct {
	cc grpc.ClientConnInterface
}

func NewVlrClient(cc grpc.ClientConnInterface) VlrClient {
	return &vlrClient{cc}
}

func (c *vlrClient) Matches(ctx context.Context, in *MatchesRequest, opts ...grpc.CallOption) (*MatchesResponse, error) {
	out := new(MatchesResponse)
	err := c.cc.Invoke(ctx, "/vlr.v1.Vlr/Matches", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VlrServer is the server API for Vlr service.
// All implementations must embed UnimplementedVlrServer
// for forward compatibility
type VlrServer interface {
	// GetMatches
	Matches(context.Context, *MatchesRequest) (*MatchesResponse, error)
	mustEmbedUnimplementedVlrServer()
}

// UnimplementedVlrServer must be embedded to have forward compatible implementations.
type UnimplementedVlrServer struct {
}

func (UnimplementedVlrServer) Matches(context.Context, *MatchesRequest) (*MatchesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Matches not implemented")
}
func (UnimplementedVlrServer) mustEmbedUnimplementedVlrServer() {}

// UnsafeVlrServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VlrServer will
// result in compilation errors.
type UnsafeVlrServer interface {
	mustEmbedUnimplementedVlrServer()
}

func RegisterVlrServer(s grpc.ServiceRegistrar, srv VlrServer) {
	s.RegisterService(&Vlr_ServiceDesc, srv)
}

func _Vlr_Matches_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MatchesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VlrServer).Matches(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vlr.v1.Vlr/Matches",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VlrServer).Matches(ctx, req.(*MatchesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Vlr_ServiceDesc is the grpc.ServiceDesc for Vlr service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Vlr_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "vlr.v1.Vlr",
	HandlerType: (*VlrServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Matches",
			Handler:    _Vlr_Matches_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "vlr/v1/vlr.proto",
}
