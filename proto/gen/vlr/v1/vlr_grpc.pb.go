// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.15.8
// source: vlr/v1/vlr.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Vlr_GetMatches_FullMethodName = "/vlr.v1.Vlr/GetMatches"
	Vlr_GetMatch_FullMethodName   = "/vlr.v1.Vlr/GetMatch"
	Vlr_GetTeam_FullMethodName    = "/vlr.v1.Vlr/GetTeam"
	Vlr_GetPlayer_FullMethodName  = "/vlr.v1.Vlr/GetPlayer"
)

// VlrClient is the client API for Vlr service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VlrClient interface {
	// GetMatches
	GetMatches(ctx context.Context, in *MatchesRequest, opts ...grpc.CallOption) (*MatchesResponse, error)
	// GetMatch
	GetMatch(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*Match, error)
	// Get Team
	GetTeam(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*TeamResponse, error)
	// Get Player
	GetPlayer(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*Player, error)
}

type vlrClient struct {
	cc grpc.ClientConnInterface
}

func NewVlrClient(cc grpc.ClientConnInterface) VlrClient {
	return &vlrClient{cc}
}

func (c *vlrClient) GetMatches(ctx context.Context, in *MatchesRequest, opts ...grpc.CallOption) (*MatchesResponse, error) {
	out := new(MatchesResponse)
	err := c.cc.Invoke(ctx, Vlr_GetMatches_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vlrClient) GetMatch(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*Match, error) {
	out := new(Match)
	err := c.cc.Invoke(ctx, Vlr_GetMatch_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vlrClient) GetTeam(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*TeamResponse, error) {
	out := new(TeamResponse)
	err := c.cc.Invoke(ctx, Vlr_GetTeam_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vlrClient) GetPlayer(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*Player, error) {
	out := new(Player)
	err := c.cc.Invoke(ctx, Vlr_GetPlayer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VlrServer is the server API for Vlr service.
// All implementations must embed UnimplementedVlrServer
// for forward compatibility
type VlrServer interface {
	// GetMatches
	GetMatches(context.Context, *MatchesRequest) (*MatchesResponse, error)
	// GetMatch
	GetMatch(context.Context, *IdRequest) (*Match, error)
	// Get Team
	GetTeam(context.Context, *IdRequest) (*TeamResponse, error)
	// Get Player
	GetPlayer(context.Context, *IdRequest) (*Player, error)
	mustEmbedUnimplementedVlrServer()
}

// UnimplementedVlrServer must be embedded to have forward compatible implementations.
type UnimplementedVlrServer struct {
}

func (UnimplementedVlrServer) GetMatches(context.Context, *MatchesRequest) (*MatchesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMatches not implemented")
}
func (UnimplementedVlrServer) GetMatch(context.Context, *IdRequest) (*Match, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMatch not implemented")
}
func (UnimplementedVlrServer) GetTeam(context.Context, *IdRequest) (*TeamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTeam not implemented")
}
func (UnimplementedVlrServer) GetPlayer(context.Context, *IdRequest) (*Player, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayer not implemented")
}
func (UnimplementedVlrServer) mustEmbedUnimplementedVlrServer() {}

// UnsafeVlrServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VlrServer will
// result in compilation errors.
type UnsafeVlrServer interface {
	mustEmbedUnimplementedVlrServer()
}

func RegisterVlrServer(s grpc.ServiceRegistrar, srv VlrServer) {
	s.RegisterService(&Vlr_ServiceDesc, srv)
}

func _Vlr_GetMatches_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MatchesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VlrServer).GetMatches(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Vlr_GetMatches_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VlrServer).GetMatches(ctx, req.(*MatchesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vlr_GetMatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VlrServer).GetMatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Vlr_GetMatch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VlrServer).GetMatch(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vlr_GetTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VlrServer).GetTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Vlr_GetTeam_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VlrServer).GetTeam(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vlr_GetPlayer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VlrServer).GetPlayer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Vlr_GetPlayer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VlrServer).GetPlayer(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Vlr_ServiceDesc is the grpc.ServiceDesc for Vlr service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Vlr_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "vlr.v1.Vlr",
	HandlerType: (*VlrServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMatches",
			Handler:    _Vlr_GetMatches_Handler,
		},
		{
			MethodName: "GetMatch",
			Handler:    _Vlr_GetMatch_Handler,
		},
		{
			MethodName: "GetTeam",
			Handler:    _Vlr_GetTeam_Handler,
		},
		{
			MethodName: "GetPlayer",
			Handler:    _Vlr_GetPlayer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "vlr/v1/vlr.proto",
}
